-- 1. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과 주민번호, 부서 명, 직급 조회

SELECT EMP_NAME AS 사원명, EMP_NO AS 주민번호, DEPT_TITLE AS 부서명, JOB_CODE AS 직급
FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID 
WHERE SUBSTR(EMP_NO, 1, 2) BETWEEN 70 AND 79
           AND SUBSTR(EMP_NO, 8, 1) = 2
           AND EMP_NAME LIKE '전%'; 
           
-- 2. 나이 상 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회

SELECT EMP_ID AS 사원번호, 
          EMP_NAME AS 사원명,
          EXTRACT(YEAR FROM SYSDATE) - EXTRACT (YEAR FROM TO_DATE(SUBSTR (EMP_NO, 1, 2),'RR')) AS 나이,
          DEPT_TITLE AS 부서명,
          JOB_NAME AS 직급
FROM EMPLOYEE
         JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
         JOIN JOB USING(JOB_CODE)
WHERE EXTRACT(YEAR FROM SYSDATE) - EXTRACT (YEAR FROM TO_DATE(SUBSTR (EMP_NO, 1, 2),'RR')) = 
          (SELECT MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT (YEAR FROM TO_DATE(SUBSTR (EMP_NO, 1, 2),'RR'))) FROM EMPLOYEE);
          
-- 3. 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회

SELECT EMP_ID AS 사원번호, EMP_NAME AS 사원명, JOB_NAME AS 직급
FROM EMPLOYEE
        JOIN JOB USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 4. 부서코드가 D5이거나 D6인 사원의 사원 명, 직급 명, 부서 코드, 부서 명 조회

SELECT EMP_NAME AS 사원명, JOB_NAME AS 직급, DEPT_CODE AS 부서코드, DEPT_TITLE AS 부서명
FROM EMPLOYEE
        JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
        JOIN JOB USING(JOB_CODE)
WHERE DEPT_CODE IN ('D5', 'D6');

-- 5. 보너스를 받는 사원의 사원 명, 부서 명, 지역 명 조회

SELECT EMP_NAME AS 사원명, BONUS AS 보너스, DEPT_TITLE AS 부서명, LOCAL_NAME AS 지역명
FROM EMPLOYEE
        JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
        JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
WHERE BONUS IS NOT NULL;

-- 6. 사원 명, 직급 명, 부서 명, 지역 명 조회

SELECT EMP_NAME AS 사원명, DEPT_TITLE AS 직급, JOB_NAME AS 부서명, LOCAL_NAME AS 지역명
FROM EMPLOYEE
         JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
         JOIN JOB USING(JOB_CODE)
         JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;
         
-- 7. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회

SELECT EMP_NAME AS 사원명, JOB_NAME AS 부서명, LOCAL_NAME AS 지역명, NATIONAL_NAME AS 국가명
FROM EMPLOYEE
         JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
         JOIN JOB USING(JOB_CODE)
         JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
         JOIN NATIONAL USING(NATIONAL_CODE)
WHERE LOCAL_NAME IN ('ASIA1', 'ASIA2');

-- 8. 한 사원과 같은 부서에서 일하는 사원의 이름 조회

SELECT E.EMP_NAME AS 사원명, E.DEPT_CODE AS 부서코드, M.EMP_NAME AS 같은부서
FROM EMPLOYEE E 
         JOIN EMPLOYEE M ON E.DEPT_CODE = M.DEPT_CODE
WHERE E.EMP_NAME != M.EMP_NAME;

-- 9. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급 명, 급여 조회(NVL 이용)

SELECT EMP_NAME AS 사원명, JOB_NAME AS 직급, NVL(BONUS, SALARY) AS 급여
FROM EMPLOYEE
         JOIN JOB USING(JOB_CODE)
WHERE JOB_CODE IN ('J4','J7');

-- 10. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일, 순위 조회

SELECT T.EMP_ID AS 사원번호, T.EMP_NAME AS 사원명, JOB_NAME AS 직급, T.HIRE_DATE AS 입사일, ROWNUM AS 순서
FROM(
        SELECT ROWNUM AS INNERNUM, E.*
        FROM EMPLOYEE E 
        ORDER BY (SALARY * 12) + ((SALARY * NVL(BONUS, 0)) * 12) DESC
        ) T
        JOIN JOB USING(JOB_CODE)
WHERE ROWNUM < 6;

-- 11. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회
-- 11-1. JOIN과 HAVING 사용
-- 11-2. 인라인 뷰 사용
-- 11-3. WITH 사용

WITH DDD AS (
        SELECT E.*, D.*, (SELECT SUM(SALARY) FROM EMPLOYEE) AS SUM_SALARY
        FROM EMPLOYEE E
        LEFT JOIN DEPARTMENT D ON DEPT_CODE = DEPT_ID
         )

SELECT DEPT_TITLE AS 부서명, SUM(SALARY) AS 월급합계
FROM DDD
WHERE DEPT_TITLE IS NOT NULL
HAVING SUM(SALARY) > (SUM_SALARY * 0.2)
GROUP BY DEPT_TITLE, SUM_SALARY;

-- 12. 부서 명과 부서 별 급여 합계 조회

SELECT DEPT_TITLE AS 부서명, SUM(SALARY)
FROM EMPLOYEE
         JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
GROUP BY DEPT_TITLE;
         